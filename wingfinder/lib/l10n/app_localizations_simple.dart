import 'package:flutter/material.dart';

class AppLocalizations {
  final Locale locale;

  AppLocalizations(this.locale);

  static AppLocalizations? of(BuildContext context) {
    return Localizations.of<AppLocalizations>(context, AppLocalizations);
  }

  static const LocalizationsDelegate<AppLocalizations> delegate = _AppLocalizationsDelegate();

  bool get isJapanese => locale.languageCode == 'ja';

  // App Title
  String get appTitle => isJapanese ? '„Ç¶„Ç£„É≥„Ç∞„Éï„Ç°„Ç§„É≥„ÉÄ„Éº - Êó•Êú¨„Åã„Çâ„É®„Éº„É≠„ÉÉ„Éë‰æø' : 'WingFinder - Japan to Europe Flights';
  
  // Tab titles
  String get budgetFlights => isJapanese ? 'üí∏ Ê†ºÂÆâËà™Á©∫Âà∏' : 'üí∏ Budget Flights';
  String get premiumFlights => isJapanese ? 'üõ´ „Éó„É¨„Éü„Ç¢„É†/VIP' : 'üõ´ Premium/VIP';
  
  // Search labels
  String get departing => isJapanese ? 'Âá∫Áô∫Âú∞' : 'Departing';
  String get arriving => isJapanese ? 'Âà∞ÁùÄÂú∞' : 'Arriving';
  String get selectDeparture => isJapanese ? 'Âá∫Áô∫Âú∞„ÇíÈÅ∏Êäû' : 'Select departure';
  String get selectArrival => isJapanese ? 'Âà∞ÁùÄÂú∞„ÇíÈÅ∏Êäû' : 'Select arrival';
  String get selectDate => isJapanese ? 'Êó•‰ªò„ÇíÈÅ∏Êäû' : 'Select date';
  String get searchFlights => isJapanese ? '„Éï„É©„Ç§„ÉàÊ§úÁ¥¢' : 'Search Flights';
  String get oneWay => isJapanese ? 'ÁâáÈÅì' : 'One-way';
  String get roundTrip => isJapanese ? 'ÂæÄÂæ©' : 'Round-trip';
  
  // Filter labels
  String get fromJapan => isJapanese ? 'Êó•Êú¨„Åã„Çâ' : 'From Japan';
  String get toEurope => isJapanese ? '„É®„Éº„É≠„ÉÉ„Éë„Å∏' : 'To Europe';
  String get allJapaneseAirports => isJapanese ? 'ÂÖ®„Å¶„ÅÆÊó•Êú¨„ÅÆÁ©∫Ê∏Ø' : 'All Japanese airports';
  String get allEuropeanAirports => isJapanese ? 'ÂÖ®„Å¶„ÅÆ„É®„Éº„É≠„ÉÉ„Éë„ÅÆÁ©∫Ê∏Ø' : 'All European airports';
  String get directOnly => isJapanese ? 'Áõ¥Ë°å‰æø„ÅÆ„Åø' : 'Direct only';
  String get visaFree => isJapanese ? '„Éì„Ç∂‰∏çË¶Å' : 'Visa-free';
  String get mistakeFares => isJapanese ? 'üö® „Éü„Çπ„ÉÜ„Ç§„ÇØÈÅãË≥É' : 'üö® Mistake fares';
  String get clearAllFilters => isJapanese ? 'ÂÖ®„Å¶„ÅÆ„Éï„Ç£„É´„Çø„Éº„Çí„ÇØ„É™„Ç¢' : 'Clear all filters';
  String get clearFilters => isJapanese ? '„Éï„Ç£„É´„Çø„Éº„Çí„ÇØ„É™„Ç¢' : 'Clear filters';
  
  // Flight classes
  String get flightClass => isJapanese ? '„ÇØ„É©„Çπ' : 'Class';
  String get economyClass => isJapanese ? '„Ç®„Ç≥„Éé„Éü„Éº' : 'Economy';
  String get premiumEconomyClass => isJapanese ? '„Éó„É¨„Éü„Ç¢„É†„Ç®„Ç≥„Éé„Éü„Éº' : 'Premium Economy';
  String get businessClass => isJapanese ? '„Éì„Ç∏„Éç„Çπ' : 'Business';
  String get firstClass => isJapanese ? '„Éï„Ç°„Éº„Çπ„Éà' : 'First';
  String get privateJet => isJapanese ? '„Éó„É©„Ç§„Éô„Éº„Éà„Ç∏„Çß„ÉÉ„Éà' : 'Private Jet';
  String get allClasses => isJapanese ? 'ÂÖ®„Å¶„ÅÆ„ÇØ„É©„Çπ' : 'All Classes';
  
  // Flight details
  String get airline => isJapanese ? 'Ëà™Á©∫‰ºöÁ§æ' : 'Airline';
  String get price => isJapanese ? 'ÊñôÈáë' : 'Price';
  String get duration => isJapanese ? 'È£õË°åÊôÇÈñì' : 'Duration';
  String get stops => isJapanese ? 'ÁµåÁî±Âú∞' : 'Stops';
  String get departure => isJapanese ? 'Âá∫Áô∫' : 'Departure';
  String get arrival => isJapanese ? 'Âà∞ÁùÄ' : 'Arrival';
  String get nonstop => isJapanese ? 'Áõ¥Ë°å‰æø' : 'Nonstop';
  String get directFlight => isJapanese ? 'Áõ¥Ë°å‰æø' : 'Direct flight';
  String get directFlightsOnly => isJapanese ? 'Áõ¥Ë°å‰æø„ÅÆ„Åø' : 'Direct flights only';
  
  // Premium section
  String get premiumPrivateFlights => isJapanese ? '„Éó„É¨„Éü„Ç¢„É†„Éª„Éó„É©„Ç§„Éô„Éº„ÉàËà™Á©∫Âà∏' : 'Premium & Private Flights';
  String get businessFirstPrivateDeals => isJapanese ? '„Éì„Ç∏„Éç„Çπ„ÄÅ„Éï„Ç°„Éº„Çπ„Éà„ÇØ„É©„Çπ„ÄÅ„Éó„É©„Ç§„Éô„Éº„Éà„Ç∏„Çß„ÉÉ„ÉàÁâπ‰æ°' : 'Business, First Class & Private Jet deals';
  
  // Status messages
  String flightsFound(int count) => isJapanese ? '${count}‰ª∂„ÅÆ„Éï„É©„Ç§„Éà„ÅåË¶ã„Å§„Åã„Çä„Åæ„Åó„Åü' : '$count flights found';
  String premiumFlightsFound(int count) => isJapanese ? '${count}‰ª∂„ÅÆ„Éó„É¨„Éü„Ç¢„É†Ëà™Á©∫Âà∏' : '$count premium flights';
  String get updatedAgo => isJapanese ? '2ÊôÇÈñìÂâç„Å´Êõ¥Êñ∞' : 'Updated 2h ago';
  String get noFlightsMatch => isJapanese ? 'Êù°‰ª∂„Å´‰∏ÄËá¥„Åô„Çã„Éï„É©„Ç§„Éà„Åå„ÅÇ„Çä„Åæ„Åõ„Çì' : 'No flights match your filters';
  String get noPremiumFlights => isJapanese ? '„Éó„É¨„Éü„Ç¢„É†Ëà™Á©∫Âà∏„ÅØ„ÅÇ„Çä„Åæ„Åõ„Çì' : 'No premium flights available';
  String get vipDeals => isJapanese ? 'VIPÁâπ‰æ°' : 'VIP Deals';
  
  // Labels and buttons
  String get mistakeFare => isJapanese ? '„Éü„Çπ„ÉÜ„Ç§„ÇØÈÅãË≥É' : 'MISTAKE FARE';
  String get hiddenCity => isJapanese ? 'Èö†„ÅóÈÉΩÂ∏Ç' : 'HIDDEN CITY';
  String get bookNow => isJapanese ? '‰ªä„Åô„Åê‰∫àÁ¥Ñ' : 'Book Now';
}

class _AppLocalizationsDelegate extends LocalizationsDelegate<AppLocalizations> {
  const _AppLocalizationsDelegate();

  @override
  Future<AppLocalizations> load(Locale locale) async {
    return AppLocalizations(locale);
  }

  @override
  bool isSupported(Locale locale) => ['en', 'ja'].contains(locale.languageCode);

  @override
  bool shouldReload(_AppLocalizationsDelegate old) => false;
}